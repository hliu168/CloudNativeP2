Architecture Decisions

1.Kafka queue was implemented for location microservice (location injection). The design was based upon the fact that there will be greater amount of location data generated by mobile device at conference. When using Kafka, the queue effectively decouples the generation (mobile REST/gRPC request) and processing (database injection) of the data. As Kafka can be scaled on its own to achieve good throughput, the queue was used with location microservice.

2.gRPC endpoint in front of the Kafka queue. gRPC will help enforce the typing of the location data.

3.RESTful API to get single location data for testing purpose. The GET request was documented as openapi.yaml and postman.json.
-- Extra exercise: although not officially required by the assignment thus not documented with openapi and postman, student modified and tested location RESTful API in front of Kafka queue as well for his personal exercise. As the lesson mentioned, RESTful API and gRPC endpoints can both be combined with Kafka queue.

4.Person microservice own's its database to allow independent person microservice to be implemented. This is good practice and helps praticing the design and implementation of microservices. When connection microservice needs to retrieve the list of persons, it calls the persons REST API endpoint, to implement and pratice microservice communication.

5.Location microservice own's its database to allow independent injection/retrieval of Location data. This is good pratice and helps isolate the design and implementation of the microservice.

6.Connection microservice don't have it's own database. Instead, it relies on microservice communication by message passing with location service and person service to get it's work done.
