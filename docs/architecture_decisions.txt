Architecture Decisions

1.Kafka queue was implemented for location microservice (location injection). The design was based upon the fact that there will be greater amount of location data generated by mobile device at conference. When using Kafka, the queue effectively decouples the generation (mobile REST/gRPC request) and processing (database injection) of the data. As Kafka can be scaled on its own to achieve good throughput, the queue was used with location microservice.

2.gRPC endpoint in front of the Kafka queue. gRPC will help enforce the typing of the location data.

3.RESTful API to get single location data for testing purpose. The GET request was documented as openapi.yaml and postman.json.
-- Extra exercise: although not officially required by the assignment thus not documented with openapi and postman, student modified and tested location RESTful API in front of Kafka queue as well for his personal exercise. As the lesson mentioned, RESTful API and gRPC endpoints can both be combined with Kafka queue.

4.Person microservice own's its database to allow independent person microservice to be implemented. This is good practice and helps praticing the design and implementation of microservices. When connection microservice needs to retrieve the list of persons, it calls the persons REST API endpoint, to implement and pratice microservice communication.

5.Location and Connection microservice currently shares one database. This is possible as location database is deployed in it's own pod. The current reason behind the sharing were 2 reasons:
-- 1) The connection service only query the location database, it don't need to write the location DB, where in reality the connection service can work by query a read replica of the location database, this makes sense.
-- 2) Although it would be a good practice exercise for student to implement 2 other RESTful microservice api endpoints for location service such that the connection service work by calling the RESTful API endpoint, the essense of the extra work has been completed for microservice communication between person microservice and connection microservice and student already get the idea. Considering the fact go from the beginning to the current stage with a working application already took the student almost a week of time, student decided to save the effort for a future lesson in the nanodegree.
